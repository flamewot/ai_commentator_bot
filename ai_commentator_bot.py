import logging
import os
import openai
from telegram import Update
from telegram.ext import Application, MessageHandler, filters, ContextTypes

# üîê –ë–µ—Ä—ë–º —Ç–æ–∫–µ–Ω—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
PORT = int(os.getenv("PORT", 8080))  # Render —Å–∞–º –ø–æ–¥—Å—Ç–∞–≤–∏—Ç –ø–æ—Ä—Ç

openai.api_key = OPENAI_API_KEY

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.DEBUG,
)
logger = logging.getLogger(__name__)


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
async def generate_comment(post_text: str) -> str:
    try:
        response = openai.ChatCompletion.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": "–¢—ã —Ç–æ–∫—Å–∏—á–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ç–æ—Ä."},
                {
                    "role": "user",
                    "content": f"–¢—ã –Ω–µ –ª—é–±–∏—à—å –≤—Å—ë –∏ –≤—Å–µ—Ö. –ò–∑ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ —É —Ç–µ–±—è –ø–∏–≤–æ, –∏–≥—Ä–∞ –≤ —Ç–∞–Ω–∫–∏ –∏ —Ä—ã–±–∞–ª–∫–∞. "
                               f"–ù–∞–ø–∏—à–∏ —Ç–æ–∫—Å–∏—á–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –¥–ª–∏–Ω–Ω–µ–µ 100 —Å–ª–æ–≤ –∫ —ç—Ç–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é: {post_text}",
                },
            ],
        )
        return response["choices"][0]["message"]["content"].strip()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {e}")
        return "–ë–ª—è —è —Å–ª–æ–º–∞–ª—Å—è —Å–æ—Ä–∏"


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
async def comment_on_post(update: Update, context: ContextTypes.DEFAULT_TYPE):
    post_text = update.message.text if update.message else None
    if not post_text:
        return

    logger.info(f"–ù–æ–≤—ã–π –ø–æ—Å—Ç: {post_text}")
    comment_text = await generate_comment(post_text)

    try:
        await update.message.reply_text(comment_text)
        logger.info("–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞: {e}")


# üöÄ –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ webhook (Render)
def main():
    application = Application.builder().token(TELEGRAM_TOKEN).build()

    application.add_handler(
        MessageHandler(filters.TEXT & ~filters.COMMAND, comment_on_post)
    )

    # Render —Ç—Ä–µ–±—É–µ—Ç webhook, –∞ –Ω–µ polling
    application.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path=TELEGRAM_TOKEN,
        webhook_url=f"https://{os.getenv('RENDER_EXTERNAL_HOSTNAME')}/{TELEGRAM_TOKEN}",
    )


if __name__ == "__main__":
    main()
